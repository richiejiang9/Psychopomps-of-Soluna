<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

maxHP = 20 + hit;
hitPoints = maxHP;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States for Attacking, Ending Turns, Pathing
depth = -y;

shake -= 1;

if(hitPoints &lt;= 0)
{
    map[gridX, gridY].occupant = noone;
    if(obj_control.currentCharacter = id)
    {
        obj_control.currentCharacter = noone;
        obj_cursor.selectedCharacter = noone;
    }
    with(instance_create(x, y, obj_dying))
    {
        sprite_index = other.sprite_index;
    }
    instance_destroy();
}

switch(state)
{
    case "initialize turn":
        if(encourage &gt; obj_control.roundCounter)
        {
            with(instance_create(x, y, obj_encourage))
            {
                target = other;
            }
        }
        else
        {
            encourage = 0;
        }
        if(poison &gt; 0)
        {
            dmg = irandom_range(1, 4);
                with(instance_create(x+ 28, y + 2, obj_dmgText))
                {
                    text = "-" + string(other.dmg);
                    ground = y;
                
                }
            hitPoints -= dmg;
            poison -= 1;
        }
    
        state = "find target";
    
        break;
        
    case "find target":

    
        atkTarget = noone;
        node = map[gridX, gridY];
        
        targetList = ds_list_create();
        
        for(ii = 0; ii &lt; ds_list_size(node.neighbors); ii += 1)
        {
            neighbor = ds_list_find_value(node.neighbors, ii);
            
            if(neighbor.occupant != noone)
            {
                if(neighbor.occupant.side == PSYCHOPOMPS)
                {
                    ds_list_add(targetList, neighbor.occupant);
                }
            }
        }
        if(ds_list_size(targetList) &gt; 0)
        {
            roll = irandom_range(1, 20);
            if(roll + mag &gt; 10)
            {
                healthRatio = 1;
                
                for(ii = 0; ii &lt; ds_list_size(targetList); ii += 1)
                {
                    tempTarget = ds_list_find_value(targetList, ii);
                    
                    if(tempTarget.hitPoints/tempTarget.maxHP &lt; healthRatio)
                    {
                        atkTarget = tempTarget;
                        healthRatio = tempTarget.hitPoints/tempTarget.maxHP;
                    }
                }
            }
            
            if(atkTarget == noone)
            {
                atkTarget = ds_list_find_value(targetList, irandom_range(0, ds_list_size(targetList) - 1));
            }
        }
        ds_list_destroy(targetList);
        
        if(atkTarget != noone)
        {
            state = "begin attack";
            actionTimer = 10;
        }
        else
        {
            state = "find move node";
        }
    
        break;
        
    case "find move node":
        heroList = ds_priority_create();
        
        with(obj_character)
        {
            if(side == PSYCHOPOMPS)
            {
                ds_priority_add(other.heroList, id, point_distance(x, y, other.x, other.y));
            }
        }
        
        closestNode = noone;
        
        while(closestNode = noone)
        {
            targetHero = ds_priority_delete_min(heroList);
            
            targetNode = map[targetHero.gridX, targetHero.gridY];
            
            for(ii = 0; ii &lt; ds_list_size(targetNode.neighbors); ii += 1)
            {
                currentNode = ds_list_find_value(targetNode.neighbors, ii);
                if(currentNode.occupant == noone &amp;&amp; currentNode.passable)
                {
                    closestNode = currentNode;
                }
            }
            if(ds_priority_size(heroList) &lt;= 0)
            {
                targetHero = noone;
                flash = true;
                alarm[0] = 30;
                state = "idle";
                break;
            }
        }
        
        ds_priority_destroy(heroList);
        
        if(targetHero != noone)
        {
            targetNode = closestNode;
            
            scr_ai_movement(map[gridX, gridY], closestNode);
            
            while(closestNode.G &gt; move * actions)
            {
                closestNode = closestNode.parent;
            }
            scr_create_path(id, closestNode);
            
            map[gridX, gridY].occupant = noone;
            gridX = closestNode.gridX;
            gridY = closestNode.gridY;
            
            closestNode.occupant = id;
            
            state = "begin path";
            
            if(closestNode.G &gt; move)
            {
                actions -= 2;
            }
            else
            {
                actions -= 1;
            }
        }
        
        scr_wipe_nodes();
        
        break;
    
    case "begin path":
        path_start(movementPath, moveSpeed, 0, true);
        
        state = "moving"
        
        break;

    case "begin attack":    //Attack case start
            
        actionTimer -= 1;
        if(actionTimer &lt;= 0)
        {
            state = "attack";
            
        }
    
        break;
    
    case "attack":      //Begins the attack phase for a character
        
        audio_play_sound(snd_atk, 1, false);        
        //Rolls attack
        atkRoll = irandom_range(1, 20);
        
        applySwordBlast = false;
        if(swordBlast)
        {  
            tempNode = map[atkTarget.gridX, atkTarget.gridY];
            
            for(ii = 0; ii &lt; ds_list_size(tempNode.neighbors); ii += 1)
            {
                current = ds_list_find_value(tempNode.neighbors, ii);
                
                if(current.occupant != noone)
                {
                    if(current.occupant.side != atkTarget.side)
                    {
                        applySwordBlast = true;
                    }
                }
            
            }
        }
        
        //Determine attack outcome
        atkStatus = scr_atk_roll(id, atkTarget);
        
        tempDmg = 0;
        
        //Damage roll
        if(atkStatus != "miss")
        {
            tempDmg = irandom_range(1, dmgDice) + dmgBonus; //Damage is calculated
            if(applySwordBlast)
            {
                tempDmg += irandom_range(1, swordBlastDmg);
            }
            if(atkStatus == "crit")
            {
                tempDmg += irandom_range(1, dmgDice);   //Damage with crits is calculated
              
                if(applySwordBlast)
                {
                    tempDmg += irandom_range(1, swordBlastDmg);
                }
            }
        }
        
        switch(atkType)
        {
            case "ranged":
                
                atkDir = point_direction(x + 16, y + 16, atkTarget.x + 16, atkTarget.y + 16);
                
                beginX = x + 16 + lengthdir_x(30, atkDir);
                beginY = y + 16 + lengthdir_y(30, atkDir);
                
                with(instance_create(beginX, beginY, obj_swordBeam))
                {
                    target = other.atkTarget;
                    status = other.atkStatus;
                    dmg = other.tempDmg;
                    dmgType = other.dmgType;
                    
                    path_add_point(movementPath, other.beginX, other.beginY, 100);
                    
                    if(status != "miss")
                    {
                        path_add_point(movementPath, target.x + 16, target.y + 16, 100);
                    }
                    else
                    {
                       path_add_point(movementPath, target.x + (irandom_range(30, 50) * choose(-1, 1)), target.y + (irandom_range(30, 50) * choose(-1, 1)), 100);
                    }
                    
                    path_start(movementPath, speed, true, true);
                    
                }
                
                state = "end attack";
                actionTimer = 30;
                
                break;
                
            case "melee":
                if(atkStatus != "miss")
                {
                    for(ii = 0; ii &lt; 6; ii += 1)
                    {
                        with(instance_create(atkTarget.x + 16, atkTarget.y + 16, obj_effect))
                        {
                            direction = irandom(360);
                            speed = choose(2, 4);
                            scale = choose(2, 3);
                            
                            image_speed = 0.5;
                            
                            if(other.atkStatus == "crit")
                            {
                                color = c_yellow;
                            
                            }
                        }
                    }
                    
                    if(atkStatus == "crit")
                    {
                        atkTarget.shake = 8;
                        atkTarget.shakeMag = 8;
                    }
                    else
                    {
                        atkTarget.shake = 4;
                        atkTarget.shakeMag = 4;
                    }
                    
                    atkTarget.hitPoints -= tempDmg;     //Target takes damage
                    
                    with(instance_create(atkTarget.x + 28, atkTarget.y + 2, obj_dmgText))
                    {
                        text = "-" + string(other.tempDmg);
                        ground = y;
                        
                        if(other.atkStatus == "crit")
                        {
                            font = f_crit;
                        }
                    }
                
                }
                else
                {
                    with(instance_create(atkTarget.x + 28, atkTarget.y + 2, obj_dmgText))
                    {
                        text = "MISS";
                        ground = y;
                        
                    }
                }
                state = "end attack";
                actionTimer = 10;
                
                break;
                
        }
        break;
        
    case "end attack":
        actionTimer -= 1;
        
        if(actionTimer &lt;= 0)
        {
            obj_control.currentCharacter = noone;
            state = "idle";
        }
        break;
            
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_clear_points(movementPath);
if(actions &gt; 0)
{
    state = "find target";
}
else
{
    state = "idle";
    obj_control.currentCharacter = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
