<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_character</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats

state = "idle";

side = PSYCHOPOMPS; //Playable characters

//Initial Characteristics
gridX = 0;
gridY = 0;

firstName = "Anon";

//Character Stats

level = 1;
class = "Anon";

atk = 0;
dex = 0;
hit = 0;
mag = 0;

atkType = "melee";
atkTarget = noone;
actionTimer = 0;

//Dmg variables
dmgDice = 4;
dmgBonus = atk;
dmgType = "piercing";

armorClass = 10 + dex;

//Health
maxHP = 30 + hit;
hitPoints = maxHP;

//Movement
move = 5 + dex;
actions = 2;
canAct = false;

initiative = dex;
initRoll = 0;

//Special Attacks
strike = false;
swordBlast = false;

//Skills
skillHitBonus = 0;
skillSaveDC = 0;

firstLevelSlotMax = 0;
firstLevelSlot = 0;

readiedAction = "error";
targetingType = "error";
actionRange = 0;

//Button Variables
defaultActions = ds_list_create();

ds_list_add(defaultActions, "end turn");

//Pathing Variables______________________________
movementPath = path_add();
path_set_kind(movementPath, 2);
path_set_closed(movementPath, false);

endPath = "idle";   //Default endPath state

moveSpeed = 8;

//Buff/Debuff Variables__________________________
//Buff
encourage = 0;
//Debuffs
poison = 0;
celestialArrow = false;

//Effect Variables_______________________________
shake = 0;
shakeMag = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States for Attacking, Ending Turns, Pathing

depth = -y; //This is used to make the character not clip through another when they're next to each other.

shake -= 1;

if(hitPoints &lt;= 0)
{
    map[gridX, gridY].occupant = noone;
    if(obj_control.currentCharacter = id)
    {
        obj_control.currentCharacter = noone;
        obj_cursor.selectedCharacter = noone;
    }
    with(instance_create(x, y, obj_dying))
    {
        sprite_index = other.sprite_index;
    }
    instance_destroy();
}

switch(state)
{
    case "initialize turn":
        if(encourage &gt; obj_control.roundCounter)
        {
            with(instance_create(x, y, obj_encourage))
            {
                target = other;
            }
        }
        else
        {
            encourage = 0;
        }
        if(poison &gt; 0)
        {
            dmg = irandom_range(1, 4);
                with(instance_create(x+ 28, y + 2, obj_dmgText))
                {
                    text = "-" + string(other.dmg);
                    ground = y;
                
                }
            hitPoints -= dmg;
            poison -= 1;
        }
        
    if(side == PSYCHOPOMPS)
    {
        scr_movement_range(map[gridX, gridY], move, actions);
        switch(atkType)
        {
            case "melee":
                scr_melee_attack_range(id);
                break;
                
            case "ranged":
                scr_ranged_attack_range(id);
                break;
        }
        
        obj_cursor.selectedCharacter = id;
    }
    else
    {
        flash = true;
        alarm[0] = 30;
    }
    
    state = "ready";
    
        break;
        
    case "begin path":      //Begins character movement
    
        path_start(movementPath, moveSpeed, 0, true);
        
        state = "moving";
        
        break;
    
    case "begin attack":    //Attack case start
            
        actionTimer -= 1;
        if(actionTimer &lt;= 0)
        {
            state = "attack";
            
        }
    
        break;
    
    case "attack":      //Begins the attack phase for a character
                
        //Rolls attack
        atkRoll = irandom_range(1, 20);
        
        applySwordBlast = false;
        if(swordBlast)
        {  
            tempNode = map[atkTarget.gridX, atkTarget.gridY];
            
            for(ii = 0; ii &lt; ds_list_size(tempNode.neighbors); ii += 1)
            {
                current = ds_list_find_value(tempNode.neighbors, ii);
                
                if(current.occupant != noone)
                {
                    if(current.occupant.side != atkTarget.side)
                    {
                        applySwordBlast = true;
                    }
                }
            
            }
        }
        
        //Determine attack outcome
        atkStatus = scr_atk_roll(id, atkTarget);
        
        tempDmg = 0;
        
        //Damage roll
        if(atkStatus != "miss")
        {
            tempDmg = irandom_range(1, dmgDice) + dmgBonus; //Damage is calculated
            if(applySwordBlast)
            {
                tempDmg += irandom_range(1, swordBlastDmg);
            }
            if(atkStatus == "crit")
            {
                tempDmg += irandom_range(1, dmgDice);   //Damage with crits is calculated
              
                if(applySwordBlast)
                {
                    tempDmg += irandom_range(1, swordBlastDmg);
                }
            }
        }
        
        switch(atkType)
        {
            case "ranged":
                audio_play_sound(snd_arrow, 1, false);
                atkDir = point_direction(x + 16, y + 16, atkTarget.x + 16, atkTarget.y + 16);
                
                beginX = x + 16 + lengthdir_x(30, atkDir);
                beginY = y + 16 + lengthdir_y(30, atkDir);
                
                with(instance_create(beginX, beginY, obj_swordBeam))
                {
                    target = other.atkTarget;
                    status = other.atkStatus;
                    dmg = other.tempDmg;
                    dmgType = other.dmgType;
                    
                    path_add_point(movementPath, other.beginX, other.beginY, 100);
                    
                    if(status != "miss")
                    {
                        path_add_point(movementPath, target.x + 16, target.y + 16, 100);
                    }
                    else
                    {
                       path_add_point(movementPath, target.x + (irandom_range(30, 50) * choose(-1, 1)), target.y + (irandom_range(30, 50) * choose(-1, 1)), 100);
                    }
                    
                    path_start(movementPath, speed, true, true);
                    
                }
                
                state = "end attack";
                actionTimer = 30;
                
                break;
                
            case "melee":
                audio_play_sound(snd_atk, 1, false);
                if(atkStatus != "miss")
                {
                    for(ii = 0; ii &lt; 6; ii += 1)
                    {
                        with(instance_create(atkTarget.x + 16, atkTarget.y + 16, obj_effect))
                        {
                            direction = irandom(360);
                            speed = choose(2, 4);
                            scale = choose(2, 3);
                            
                            image_speed = 0.5;
                            
                            if(other.atkStatus == "crit")
                            {
                                color = c_yellow;
                            
                            }
                        }
                    }
                    
                    if(atkStatus == "crit")
                    {
                        atkTarget.shake = 8;
                        atkTarget.shakeMag = 8;
                    }
                    else
                    {
                        atkTarget.shake = 4;
                        atkTarget.shakeMag = 4;
                    }
                    
                    atkTarget.hitPoints -= tempDmg;     //Target takes damage
                    
                    with(instance_create(atkTarget.x + 28, atkTarget.y + 2, obj_dmgText))
                    {
                        text = "-" + string(other.tempDmg);
                        ground = y;
                        
                        if(other.atkStatus == "crit")
                        {
                            font = f_crit;
                        }
                    }
                
                }
                else
                {
                    with(instance_create(atkTarget.x + 28, atkTarget.y + 2, obj_dmgText))
                    {
                        text = "MISS";
                        ground = y;
                        
                    }
                }
                state = "end attack";
                actionTimer = 10;
                
                break;
                
        }
        break;
        
    case "end attack":
        actionTimer -= 1;
        
        if(actionTimer &lt;= 0)
        {
            if(actions &gt; 0)
            {
                obj_cursor.selectedCharacter = id;
                             
                scr_movement_range(map[gridX, gridY], move, actions);          
            }
            else
            {
                obj_control.currentCharacter = noone;

            }
            state = "idle";
            
        }

        break;    
    
    case "begin action":
        scr_wipe_nodes();
        scr_action_targeting(id, targetingType, actionRange);
    
        break;
    
    case "perform action":
        scr_perform_action(id, readiedAction);
        
        scr_wipe_nodes();
        break;
    
    case "end action":
        actionTimer -= 1;
        
        if(actionTimer &lt;= 0)
        {
            state = "idle";
            
            if(actions &gt; 0)
            {
                scr_movement_range(map[gridX, gridY], move, actions);
            }
            else
            {
                state = "idle";
                obj_cursor.selectdCharacter = noone;
                obj_control.currentCharacter = noone;
                
            }
        }
    
        break;
        
    case "end turn":
        actionTimer -= 1;
        if(actionTimer &lt;= 0)
        {
            obj_cursor.selectedCharacter = noone;
            obj_control.currentCharacter = noone;
            
            state = "idle";
        
        }
        break;
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear path
path_clear_points(movementPath);


if(endPath == "ready")
{
    state = "idle";
    
    if(actions &gt; 0)     //id is handed to the cursor to control.
    {
        obj_cursor.selectedCharacter = id;
        scr_movement_range(map[gridX, gridY], move, actions);
    

        
        if(canAct)
        {
            switch(atkType)
            {
                case "ranged":
                scr_ranged_attack_range(id);
                break;
                
                case "melee":
                scr_melee_attack_range(id);
                break;
                
            }
            
        }
        
    }
    else
    {
        obj_control.currentCharacter = noone;
        
    }
}
else
{
    state = endPath;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Line and Atk Line

//When a cursor hovers over a node other than character's
//If the cursor hovers over a different node than the character
if(instance_exists(obj_cursor))
{
    if(obj_cursor.selectedCharacter == id &amp;&amp; obj_cursor.hoverNode != noone)
    {
        if(obj_cursor.hoverNode != noone)
        {
            tempNode = obj_cursor.hoverNode;
            
            if(tempNode.moveNode)
            {
                current = tempNode;
                
                while(current.parent != noone)
                {
                    draw_line_width_color(current.x + 16, current.y + 16, current.parent.x + 16, current.parent.y + 16, 4, c_lime, c_lime);
                    
                    current = current.parent;
                }
            }
            
            if(tempNode.atkNode)
            {
                switch(atkType)
                {
                    case "ranged":        //Line is drawn for the attacker's range
                        draw_line_width_color(x + 16, y + 16, tempNode.x + 16, tempNode.y + 16, 4, c_purple, c_purple);
                        break;
                        
                    case "melee":
                        tempX = abs(tempNode.gridX - gridX);
                        tempY = abs(tempNode.gridY - gridY);
                        
                        if(tempX &lt;= 1 &amp;&amp; tempY &lt;= 1)        //Line is drawn for the attacker's range
                        {
                            draw_line_width_color(x + 16, y + 16, tempNode.x + 16, tempNode.y + 16, 4, c_purple, c_purple);
                        
                        }
                        else
                        {
                            current = noone;
                            tempG = 100;
                            
                            for(ii = 0; ii &lt; ds_list_size(tempNode.neighbors); ii += 1)
                            {
                                neighbor = ds_list_find_value(tempNode.neighbors, ii);
                                
                                if(neighbor.occupant == noone &amp;&amp; neighbor.G &gt; 0 &amp;&amp; neighbor.G &lt; tempG)
                                {
                                    tempG = neighbor.G;
                                    current = neighbor;
                                }
                            
                            }
                            
                            draw_line_width_color(tempNode.x + 16, tempNode.y + 16, current.x + 16, current.y + 16, 4, c_purple, c_purple);
                            
                            while(current.parent != noone)
                            {
                                draw_line_width_color(current.x + 16, current.y + 16, current.parent.x + 16, current.parent.y + 16, 4, c_purple, c_purple);
                                
                                current = current.parent;
                              
                            }
                            
                        }
                        break;
                        
                }
        
            }
            
        }
        
    }
    if(shake &gt; 0)
    {
        draw_sprite_ext(sprite_index, -1, x + irandom_range(-shakeMag, shakeMag), y + irandom_range(-shakeMag, shakeMag), 1, 1, 0, c_white, 1);
        
    }
    else
    {
        draw_self();
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
